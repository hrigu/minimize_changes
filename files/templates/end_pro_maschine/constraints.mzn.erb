%%%%%%%%%%%
% CONSTRAINTS
%%%%%%%%%%%

% Alle Produkte verarbeiten
% Pro Produkt und Timeslot muss die Anzahl des Produktes auf allen Maschinen zusammengezaehlt den Bedarf ergeben
constraint forall(p in PRODUKTE, t in TIME_SLOTS) (
sum(m in MASCHINEN) (bool2int(plan[m,t] == p)) == bedarf[p,t]
);


% In "plan" gibt es Timeslots, in dem die Maschine nichts zu tun hat.
% Die füllen mit dem nächstfolgenden Produkt, damit das Erkennen von Produktwechsel einfacher wird.
constraint forall(m in MASCHINEN, t in TIME_SLOTS where t > 1) (

% etwas schneller
((plan[m,t] == 0) /\ (plan_2[m,t] == plan_2[m,t-1]))
\/
(not(plan[m,t] == 0) /\ (plan_2[m,t] == plan[m,t]))

%	% etwas langsamer:
%	let  { var bool: a = (plan[m,t] == 0)}
%	in
%	(a /\ (plan_2[m,t] == plan_2[m,t-1]))
%	\/
%	(not(a) /\ (plan_2[m,t] == plan[m,t]))

);

% Fuer t = 1 (erster Timeslot)
constraint forall(m in MASCHINEN) (
((plan[m,1] == 0) /\ (plan_2[m,1] == plan_2[m,2]))
\/
(not(plan[m,1] == 0) /\ (plan_2[m,1] == plan[m,1]))

);



% Anzahl Wechsel pro Maschine
constraint forall(m in MASCHINEN, t in TIME_SLOTS) (wechsel[m,anzahl_time_slots] == 0); % nie ein Wechsel im letzten Time Step
constraint forall(m in MASCHINEN, t in TIME_SLOTS where t < anzahl_time_slots) (
wechsel[m,t] == bool2int(not(plan_2[m,t] == plan_2[m,t+1]))
);

% constraint end_wechsel == sum(m in MASCHINEN, t in TIME_SLOTS) (wechsel[m,t]);
<% @problem.anzahl_maschinen.times do |i| %>
constraint end_wechsel_m_<%=i+1 %> == sum(t in TIME_SLOTS) (wechsel[<%= i+1 %>,t]);
<% end %>


%%%%%%%%%%%
% END CONSTRAINTS
%%%%%%%%%%%